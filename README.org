* devops
  Since the =termina/penguin= container in [[https://old.reddit.com/r/Crostini/][Crostini]] comes with Python3, why not use it instead of bash for getting all the development utilities and repos I will need?

* =bootstrap.py=
  Installs things.  Assumes passwordless =sudo= privilege level, which is the case in the Crostini container.

** usage

   #+begin_src shell
$ python3 bootstrap.py <options> [--dry-run]
   #+end_src

   - =options= are any of the recipes in the =TARGETS= dictionary.
   - use =--dry-run= to see what would happen without changing anything.

** examples

   #+begin_src shell
$ python3 bootstrap.py k
   #+end_src

   This would clone the [[git@github.com:kevinlawler/kona.git][kona]] source from GitHub, =make= it, and put a symlink to the executable in =$HOME/bin/k=.

   #+begin_src shell
$ python3 bootstrap.py j xinu
   #+end_src

   This would install [[https://code.jsoftware.com/wiki/System/Installation/Linux][J]] as a =.deb= package, and clone my private copy of the [[https://github.iu.edu/SICE-OS/xinu][Xinu]] repo.

** help text
   Call the script with no arguments to see this message:

   #+begin_src shell

Usage: python3 bootstrap.py <options> [--dry-run]
Possible options:

emacs: sudo apt-get install -y emacs25-nox unifont
xinu:  sudo apt-get install -y qemu gawk bison flex libz-dev gcc-arm-none-eabi make
       git clone --recursive git@github.iu.edu:ashroyer/xinu-s19.git ~/repo/xinu-s19
j:     curl -O http://www.jsoftware.com/download/j807/install/j807_arm64.deb
       sudo dpkg -i j807_arm64.deb
       ln -s $(which ijconsole) $HOME/bin/j
       rm j807_arm64.deb
e110:  sudo apt-get install -y python3-pip
       pip3 install --user myhdl
k:     sudo apt-get install -y rlwrap make
       git clone git@github.com:kevinlawler/kona.git $HOME/repo/kona
       cd $HOME/repo/kona && make && cd -
       rm -f $HOME/bin/k
       ln -s $HOME/repo/kona/k $HOME/bin/k

   #+end_src

* =ssh_config=
  Copy this file to =$HOME/.ssh/config= for better ssh-ing.  BTW you have to put the public key on the server first, either via the GitHub/GitLab web UI, or =ssh-copy-id=.

* TinyTeX
  TinyTeX only installs what you need.

  - [[https://yihui.name/tinytex/][homepage]]
  - [[https://github.com/brimoran/Linux-on-ASUS-C101PA][someone using it on Crostini]]

** usage
   1. try to build your .tex file
   2. see an error message like =! LaTeX Error: File `times.sty' not found.=
   3. run =tlmgr search --global --file "filename"= to see what package provides the file (in this case the output looks like):

      #+begin_src shell
   $ tlmgr search --global --file "/times.sty"
   psnfss:
           texmf-dist/tex/latex/psnfss/times.sty
   ...
      #+end_src
   4. finally do =tlmgr install psnfss= to get the needed thing
   5. general-purpose fix for other confusing errors is:
      #+begin_src shell
   tlmgr update --self --all
   tlmgr path add
   fmtutil-sys --all
      #+end_src


